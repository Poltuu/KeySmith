<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeySmith</name>
    </assembly>
    <members>
        <member name="T:KeySmith.GenerationException">
            <summary>
            Represents errors from another process during value generation
            </summary>
        </member>
        <member name="M:KeySmith.GenerationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KeySmith.GenerationException"/> class
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:KeySmith.ILockService">
            <summary>
            A service able to serve distributed lock on one redis instance
            </summary>
        </member>
        <member name="M:KeySmith.ILockService.LockAsync(KeySmith.Key,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Wait until a distributed lock on the given key is acquired and executes the callback.
            <para></para>
            If the lock is lost, the <see cref="T:System.Threading.CancellationToken"/> given as a parameter to the callback will be canceled.
            This <see cref="T:System.Threading.CancellationToken"/> may also be canceled using the <paramref name="cancellationToken"/> parameter.
            The <paramref name="cancellationToken"/> may also trigger an early exit from the waiting stage.
            </summary>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">From <paramref name="cancellationToken"/> or losing redis key</exception>
        </member>
        <member name="M:KeySmith.ILockService.LockAsync``1(KeySmith.Key,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Wait until a distributed lock on the given key is acquired and returns the value from the callback.
            <para></para>
            If the lock is lost, the <see cref="T:System.Threading.CancellationToken"/> given as a parameter to the callback will be canceled.
            This <see cref="T:System.Threading.CancellationToken"/> may also be canceled using the <paramref name="cancellationToken"/> parameter.
            The <paramref name="cancellationToken"/> may also trigger an early exit from the waiting stage.
            </summary>
            <param name="key"></param>
            <param name="callback"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">From <paramref name="cancellationToken"/> or losing redis key</exception>
        </member>
        <member name="T:KeySmith.IMemoLockService">
            <summary>
            A service able to help memoization of a generator method through use of distributed lock on one redis instance
            </summary>
        </member>
        <member name="M:KeySmith.IMemoLockService.MemoLockAsync(KeySmith.MemoKey,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{StackExchange.Redis.RedisValue}},System.Threading.CancellationToken)">
            <summary>
            Try to use the distributed cache version of the result from the generator.
            <para></para>
            In case of problem, the generator is eventually used instead of the cached value.
            </summary>
            <param name="key"></param>
            <param name="generator"></param>
            <param name="cancellationToken">This lets you cancel the waiting and the generation</param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.Internals.Locks.LockProtector.#ctor(KeySmith.Internals.Scripts.IScriptLibrary,KeySmith.Internals.Locks.LockState,System.Boolean)">
            <summary>
            for testing purposes only
            </summary>
            <param name="scriptLibrary"></param>
            <param name="state"></param>
            <param name="startprotection"></param>
        </member>
        <member name="T:KeySmith.Key">
            <summary>
            This class represents a distributed lock key
            </summary>
        </member>
        <member name="M:KeySmith.Key.#ctor(System.String,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:KeySmith.Key"/> class
            </summary>
            <param name="root">Root of redis key used for every necessary entry in redis</param>
            <param name="lockName">The name of the current lock key</param>
            <param name="redisKeyExpiration">Expiration of redis keys needed for the locking process</param>
        </member>
        <member name="T:KeySmith.MemoKey">
            <summary>
            This class represents a distributed key for memoization
            </summary>
        </member>
        <member name="M:KeySmith.MemoKey.#ctor(System.String,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:KeySmith.MemoKey"/> class
            </summary>
            <param name="root">Root of redis key used for every necessary entry in redis</param>
            <param name="lockName">The name of the current lock key</param>
            <param name="valueExpiration">Expiration of the redis key associated with the generated value</param>
            <param name="lockExpiration">Expiration of redis keys needed for the locking process</param>
        </member>
        <member name="T:KeySmith.ServiceCollectionExtensions">
            <summary>
            A set of extensions methods on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="M:KeySmith.ServiceCollectionExtensions.AddKeySmith(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Options.IOptions{StackExchange.Redis.ConfigurationOptions})">
            <summary>
            Add <see cref="T:KeySmith.ILockService"/> and <see cref="T:KeySmith.IMemoLockService"/> to the provided <paramref name="services"/>.
            </summary>
            <param name="services"></param>
            <param name="options"><see cref="T:StackExchange.Redis.ConnectionMultiplexer"/> will be registered as a singleton using the provided options</param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.ServiceCollectionExtensions.AddKeySmith(Microsoft.Extensions.DependencyInjection.IServiceCollection,StackExchange.Redis.ConfigurationOptions)">
            <summary>
            Add <see cref="T:KeySmith.ILockService"/> and <see cref="T:KeySmith.IMemoLockService"/> to the provided <paramref name="services"/>.
            </summary>
            <param name="services"></param>
            <param name="options"><see cref="T:StackExchange.Redis.ConnectionMultiplexer"/> will be registered as a singleton using the provided options</param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.ServiceCollectionExtensions.AddKeySmith(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,StackExchange.Redis.ConnectionMultiplexer})">
            <summary>
            Add <see cref="T:KeySmith.ILockService"/> and <see cref="T:KeySmith.IMemoLockService"/> to the provided <paramref name="services"/>.
            </summary>
            <param name="services"></param>
            <param name="getConnection"><see cref="T:StackExchange.Redis.ConnectionMultiplexer"/> will be registered as a singleton using the provided callback</param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.ServiceCollectionExtensions.AddKeySmithWithoutConnectionMultiplexer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add <see cref="T:KeySmith.ILockService"/> and <see cref="T:KeySmith.IMemoLockService"/> to the provided <paramref name="services"/>.
            <para></para>
            <see cref="T:StackExchange.Redis.ConnectionMultiplexer"/> needs to be injectable and configured on this <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
    </members>
</doc>
