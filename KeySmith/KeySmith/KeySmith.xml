<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeySmith</name>
    </assembly>
    <members>
        <member name="T:KeySmith.DistributedLockKey">
            <summary>
            This class represents a lock key
            </summary>
        </member>
        <member name="P:KeySmith.DistributedLockKey.MaxWaitingTime">
            <summary>
            Gets the maximum waiting time before throwing a TimeoutException and leaving the queue for this lock.
            This represents the maximum time a process can be waiting for this key to be freed.
            This should be superior to <see cref="P:KeySmith.DistributedLockKey.RedisKeyExpiration"/>
            </summary>
        </member>
        <member name="P:KeySmith.DistributedLockKey.RedisKeyExpiration">
            <summary>
            Gets the expiration for the redis key
            This represents the time when an error most likely occurred, and the redis key resets itself
            </summary>
        </member>
        <member name="M:KeySmith.DistributedLockKey.#ctor(System.String,System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
             Initializes a new instance of the <see cref="T:KeySmith.DistributedLockKey"/> class
            </summary>
            <param name="root"></param>
            <param name="lockName"></param>
            <param name="maxWaitingTime"></param>
            <param name="redisKeyExpiration"></param>
        </member>
        <member name="M:KeySmith.DistributedLockKey.GetKey">
            <summary>
            Returns the key holding the value. Used in instantiation scenario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeySmith.DistributedLockKey.GetLockKey">
            <summary>
            Returns the key holding the lock itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeySmith.DistributedLockKey.GetLockNotifKey">
            <summary>
            Returns the key used in pub/sub on the lock release
            </summary>
            <returns></returns>
        </member>
        <member name="M:KeySmith.DistributedLockKey.GetLockWaitingListKey">
            <summary>
            Returns the key holding the waiting list
            </summary>
            <returns></returns>
        </member>
        <member name="T:KeySmith.GenerationException">
            <summary>
            Represents errors from another process during value generation
            </summary>
        </member>
        <member name="M:KeySmith.GenerationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KeySmith.GenerationException"/> class
            </summary>
            <param name="exceptionType"></param>
            <param name="message"></param>
        </member>
        <member name="T:KeySmith.IDistributedLockService">
            <summary>
            Represents a class able to serve distributed lock on one redis instance
            </summary>
        </member>
        <member name="M:KeySmith.IDistributedLockService.TryAcquireDistributedLockAsync(KeySmith.DistributedLockKey)">
            <summary>
            Returns a disposable object if the distributed lock is acquired, null otherwise
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.IDistributedLockService.AcquireDistributedLockAsync(KeySmith.DistributedLockKey)">
            <summary>
            Wait until the lock is acquired. Throw a timeout exception otherwise
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.IDistributedLockService.GenerateOnlyOnceUsingDistributedLockAsync``1(KeySmith.DistributedLockKey,System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan)">
            <summary>
            Get a value, or generate it using the generator function. The evaluation of the generator is guaranteed to be called only once across the system.
            Throw a timeout exception if the lock wasn't acquired or if the generator takes too much time.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="generator"></param>
            <param name="waitMaxTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.IDistributedLockService.InvalidateAsync(KeySmith.DistributedLockKey)">
            <summary>
            Invalidate the cache associated with a given key. This should be used if something went terribly wrong, or in some instantiation scenario, to force a new value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:KeySmith.IRedisSerializer">
            <summary>
            A class able to serialize redis messages
            </summary>
        </member>
        <member name="M:KeySmith.IRedisSerializer.Serialize``1(``0)">
            <summary>
            Serializes the object for redis
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:KeySmith.IRedisSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the value from redis
            </summary>
            <typeparam name="T"></typeparam>
            <param name="redisValue"></param>
            <returns></returns>
        </member>
        <member name="T:KeySmith.KeySpaceConfiguration">
            <summary>
            This class represents the configuration of redis key space
            </summary>
        </member>
        <member name="P:KeySmith.KeySpaceConfiguration.Root">
            <summary>
            Gets or sets the root for all redis keys
            </summary>
        </member>
        <member name="T:KeySmith.RedisLockService">
            <summary>
            A service able to serve distributed lock on one redis instance
            </summary>
        </member>
        <member name="M:KeySmith.RedisLockService.#ctor(StackExchange.Redis.ConnectionMultiplexer,Microsoft.Extensions.Options.IOptions{KeySmith.KeySpaceConfiguration},KeySmith.IRedisSerializer,Microsoft.Extensions.Logging.ILogger{KeySmith.RedisLockService})">
            <summary>
             Initializes a new instance of the <see cref="T:KeySmith.RedisLockService"/> class
            </summary>
            <param name="redis"></param>
            <param name="configuration"></param>
            <param name="redisSerializer"></param>
            <param name="logger"></param>
        </member>
        <member name="M:KeySmith.RedisLockService.InvalidateAsync(KeySmith.DistributedLockKey)">
            <inheritdoc />
        </member>
        <member name="M:KeySmith.RedisLockService.TryAcquireDistributedLockAsync(KeySmith.DistributedLockKey)">
            <inheritdoc />
        </member>
        <member name="M:KeySmith.RedisLockService.AcquireDistributedLockAsync(KeySmith.DistributedLockKey)">
            <inheritdoc />
        </member>
        <member name="M:KeySmith.RedisLockService.GenerateOnlyOnceUsingDistributedLockAsync``1(KeySmith.DistributedLockKey,System.Func{System.Threading.Tasks.Task{``0}},System.TimeSpan)">
            <inheritdoc />
        </member>
    </members>
</doc>
